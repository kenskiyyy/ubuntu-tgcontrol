import dotenv from 'dotenv';
import { Telegraf, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import { exec } from 'child_process';

dotenv.config({path: './config.env'});

const bot = new Telegraf(process.env.Token);

bot.command('start', (ctx) => {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:', Markup.keyboard([
        ['üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'],
        ['üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç'], 
        ['‚ö° –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É']
    ]).resize());
});

bot.hears('üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', async (ctx) => {
    if (ctx.from.id.toString() !== process.env.Me) return;
    try {
        exec('import -window root screenshot.png', async (error, stdout, stderr) => {
            if (error) {
                ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ' + error.message);
                return;
            }
            try {
                await ctx.replyWithPhoto({ source: './screenshot.png' });
                exec('rm screenshot.png');
            } catch (err) {
                ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
                console.error(err);
                exec('rm screenshot.png');
            }
        });
    } catch (err) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
        console.error(err);
    }
});

bot.command('id', (ctx) => {
    ctx.reply(`–í–∞—à ID: ${ctx.from.id}`);
});

bot.hears('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ', async (ctx) => {
    if (ctx.from.id.toString() !== process.env.Me) return;
    try {
        exec('uname -a', (error, stdout, stderr) => {
            if (error) {
                ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ');
                return;
            }
            exec('lsb_release -d && dpkg -l | wc -l && flatpak list | wc -l && snap list | wc -l && uptime -p && lscpu | grep "Model name" && lspci | grep -i vga && free -m | grep "^Mem:" | awk \'{print $2","$3}\'', (error, stdout, stderr) => {
                const [system, dpkg, flatpak, snap, uptime, cpu, gpu, ram] = stdout.split('\n');
                const [totalRam, usedRam] = ram.trim().split(',').map(Number);
                const ramPercentage = ((usedRam/totalRam) * 100).toFixed(1);
                ctx.reply(
                    `*–°–∏—Å—Ç–µ–º–∞:* ${system.replace('Description:', '').trim()}\n` +
                    `*–ü–∞–∫–µ—Ç—ã:* ${dpkg.trim()} (dpkg), ${flatpak.trim()} (flatpak), ${snap.trim()} (snap)\n` +
                    `*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* ${uptime.replace('up ', '')}\n` +
                    `*CPU:* ${cpu.replace('Model name:', '').trim()}\n` +
                    `*GPU:* ${gpu.split(':')[2].trim()}\n` +
                    `*RAM:* ${(usedRam/1024).toFixed(1)}GB/${(totalRam/1024).toFixed(1)}GB (${ramPercentage}%)\n` +
                    `*–¢—Ä–∞—Ñ–∏–∫:* ‚¨áÔ∏è ${(parseInt(stdout.match(/RX bytes:(\d+)/) ? stdout.match(/RX bytes:(\d+)/)[1] : 0) / (1024 * 1024)).toFixed(2)}MB ‚¨ÜÔ∏è ${(parseInt(stdout.match(/TX bytes:(\d+)/) ? stdout.match(/TX bytes:(\d+)/)[1] : 0) / (1024 * 1024)).toFixed(2)}MB\n`,
                    { parse_mode: 'Markdown' }
                );
            });
        });
    } catch (err) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
        console.error(err);
    }
});

bot.hears('‚ö° –í—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É', async (ctx) => {
    if (ctx.from.id.toString() !== process.env.Me) return;
    try {
        await ctx.reply('–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...');
        exec('sudo shutdown now', (error, stdout, stderr) => {
            if (error) {
                ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: ' + error.message + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ sudoers –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å shutdown –±–µ–∑ –ø–∞—Ä–æ–ª—è');
                return;
            }
        });
    } catch (err) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
        console.error(err);
    }
});

async function startBot() {
    try {
        await bot.launch();
        const botInfo = await bot.telegram.getMe();
        console.log('Bot is running as @' + botInfo.username);
        await bot.telegram.sendMessage(process.env.Me, '–í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
        setTimeout(startBot, 5000);
    }
}

startBot();